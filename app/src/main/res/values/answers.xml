<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string-array name="answers">
        <item>1.ПОНЯТИЕ АЛГОРИТМА. ПОДХОДЫ К ОПРЕДЕЛЕНИЮ АЛГОРИТМА. СВОЙСТВО АЛГОРИТМА.\n\n
Понятие алгоритма является одним из основных понятий современ¬ных математики и информатики, но зародилось оно еще в глубокой древности. Термин алгоритм происходит от имени средневекового узбекского математика Аль Хорезми (IX в.), который сформулировал правила выполнения четырех арифметических действий в десятичной системе счисления.\n\n
В современной информатике используется следующее определение алгоритма. Алгоритмом называют систему четких однозначных указаний, которые определяют последовательность действий над некоторыми объектами и после конечного числа шагов приводят к получению требуемого результата.\n\n
Подходы к определению алгоритма:
Слово алгоритм происходит от algorithmi – латинской формы написания имени великого математика IX в. Аль Хорезми, который сформулировал правила выполнения арифметических действий. Первоначально под алгоритмами и понимали только правила выполнения четырех арифметических действий над многозначными числами. В дальнейшем это понятие стали использовать вообще для обозначения последовательности действий, приводящих к решению поставленной задачи.\n\n
Свойства алгоритма\n
1. Дискретность алгоритма предполагает, что решение задачи (т.е. алгоритм) разбито на отдельные шаги (операции, команды) и переход к сле¬дующему шагу возможен только после выполнения предыдущего.
\n
2. Определенность (точность) алгоритма предполагает, что каждая его команда должна однозначно определять действие исполнителя алгоритма (записанные в алгоритме команды должны иметь однозначную трактовку).
\n
3. Понятность алгоритма подразумевает, что он должен включать в себя только те шаги или команды, которые понятны исполнителю (в алгоритме не могут присутствовать команды, смысл которых неизвестен исполнителю).
\n
4. Результативность (конечность) предполагает, что алгоритм дол¬жен быть нацелен на получение конечного результата, т.е. исполнение алгоритма должно закончиться за конечное число шагов.
\n
5. Массовость алгоритма подразумевает, что алгоритм должен быть пригоден для решения целого класса однотипных задач (а не только для одной конкретной задачи).
\n\n
Основные способы записи алгоритмов
\n
1. Словесный способ, т.е. описание алгоритма на естественном языке (словами).\n
2. Формульно-словесный способ, в котором кроме слов могут использоваться математические формулы.\n
3. Графический способ, т.е. в виде блок-схемы.\n
4. Программный способ, т.е. в виде программы на алгоритмическом языке.\n
</item>
        <item>2.СТРУКТУРА ПРОГРАММЫ, ЭЛЕМЕНТЫ ЯЗЫКА С++. ПОНЯТИЕ ТИПА ДАННЫХ.\n\n
Структура программы на языке С++ \n
Программа на языке C++ состоит из функций, описаний и директив препроцессора.\n
(Препроцессор — это программа, которая выполняет обработку файла исходного кода перед началом компиляции).\n
Рассмотрим простейшую программу:\n
#include &lt;Ciostream>\n
using namespace std;\n
int main()\n
{\n
cout &lt;&lt; "Hello world!" &lt;&lt; end1;\n
return 0;\n
}\n
В первой строке с помощью директивы #include подключается заголовочный файл &lt;iostream>, который содержит необходимую информацию для управления вводом/выводом.\n
Следующая директива using открывает доступ к пространству имен (англ. namespace) std, в котором определяются средства стандартной библиотеки языка C++.\n
(Пространство имён — некоторое множество, созданное для логической группировки уникальных идентификаторов).\n
Отправной точкой выполнения любой С++-программы является функция main(). Функция содержит четыре элемента:\n
•	возвращаемый тип (в нашем случае int);\n
•	имя функции (main);\n
•	список параметров, заключенный в круглые скобки (в данном случае список пуст);\n
•	заключенное в фигурные скобки, тело функции, представляющее собой блок инструкций.\n\n
Инструкцией называется часть программы, определяющая действие и не являющаяся директивой препроцессора.\n
В нашей программе тело функции содержит две инструкции:\n
•	cout  "Hello, World!";\n
•	return 0;\n
Во-первых, выводится на экран строка Hello, World, а затем возвращается в точку вызова значение 0, которое означает, что программа выполнена успешно.\n
Обратим внимание на то, что каждая инструкция в языке С++ заканчивается точкой с запятой. Существуют следующие исключения:\n
•	директивы препроцессора, начинающиеся с символа # (например, #include);\n
•	составные операторы и блоки определения функций, которые обрамлены фигурными скобками — { }.\n\n

Элементы языка С++\n
Начнем изучение языка С++ с рассмотрения состава и основных конструкций необходимых для написания программ.\n
Алфавит языка\n
Алфавит языка программирования C++ включает:\n
•	прописные и строчные латинские буквы, и знак подчеркивания;\n
•	арабские цифры от 0 до 9;\n
•	специальные знаки: " { } , | [ ] ( ) + - / % * . \ ? &lt; = > ! &amp; # - ; ' '\n
•	пробельные символы: пробел, символы табуляции, символы перехода на новую строку.\n\n
Из символов алфавита формируются лексемы языка (минимальная единица языка, имеющая самостоятельный смысл):\n
o	идентификаторы;\n
o	ключевые слова;\n
o	знаки операций;\n
o	константы;\n
o	разделители (скобки, точка, запятая, пробельные символы).\n\n

Идентификаторы\n
Идентификатор — это имя программного объекта\n
Первым символом в идентификаторе может быть буква или знак подчеркивания. Внутри идентификаторов не допускается использование пробелов.\n
Например: v1, _sum\n\n

При выборе идентификатора следует иметь в виду следующее:\n
•	идентификатор не должен совпадать с ключевыми словами и именами используемых стандартных объектов языка;\n
•	не рекомендуется начинать идентификаторы с символа подчеркивания, т. к. в этом случае они могут совпасть с именами системных функций или переменных.\n\n

Ключевые слова\n
Ключевые слова — это зарезервированные идентификаторы, которые имеют специальное значение для компилятора.\n

Таблица1. Список ключевых слов C++\n
asm auto bool break case catch char class const\n
const_cast continue default delete do double\n
dynamic_cast else enum explicit export extern\n
false float for friend goto if inline int long\n
mutable namespace new operator private protected\n
public register reinterpret_cast return short\n
signed sizeof static static__cast struct switch\n
template this throw true try typedef typeid typename\n
union unsigned using virtual void volatile wchar_t while\n\n

Знаки операций\n
Знак операции — это один или более символов, определяющих действие над операндами.
Операции делятся на унарные, бинарные и тернарную по количеству участвующих в них операндов. Один и тот же знак может интерпретироваться по-разному в зависимости от контекста.\n\n

Константы\n
Константами называют неизменяемые величины.\n
Различаются целые, вещественные, символьные и строковые константы. Компилятор, выделив константу в качестве лексемы, относит ее к одному из типов по ее внешнему виду.\n\n

Комментарии\n
Комментарии используются для пояснения отдельных частей или всей программы. Отметим, что компилятор игнорирует комментарии.\n
В языке С++ используется две формы комментариев:\n
•	комментарий начинается с двух символов «прямая косая черта» // и заканчивается символом перехода на новую строку\n
•	комментарий заключается между символами-скобками /* ... */\n\n

Внимание! Вложенные комментарии-скобки стандартом не допускаются.\n
Внутри комментария можно использовать любые допустимые на данном компьютере символы.\n\n

Типы данных С++\n
Любая программа в ходе работы обрабатывает данные. Хранение и обработка данных зависит от их типа. Каждая константа, переменная, результат вычисления выражения или функции должны иметь определенный тип.\n\n

Тип данных определяет:\n
•	представление данных в памяти компьютера;\n
•	множество значений, которые могут принимать величины данного типа;\n
•	операции и функции, которые можно применять к величинам этого типа.\n\n

Все типы языка C++ можно разделить на основные и составные.\n
Основные типы данных используются для представления целых, вещественных, символьных и логических величин. К составным типам относятся массивы, перечисления, функции, структуры, ссылки, указатели, объединения и классы.\n\n

Основные типы данных\n
Для описания основных типов данных определены следующие ключевые слова:\n
•	int (целый);\n
•	char (символьный);\n
•	wchar_t (расширенный символьный);\n
•	bool (логический);\n
•	float (вещественный);\n
•	double (вещественный с двойной точностью).\n\n

Для уточнения диапазона значений и внутреннего представления стандартных типов применяются четыре спецификатора типа:\n
•	short (короткий);\n
•	long (длинный);\n
•	signed (знаковый);\n
•	unsigned (беззнаковый).\n\n

Типичные размеры значений и диапазоны представлений\n
Тип: bool\n
Размер (байт): 1\n
Диапазон значений: true, false\n
Замечания: Внутренняя форма представления значения false - 0. Любое другое значение интерпретируется как true.\n\n

Тип: signed char\n
Размер (байт): 1\n
Диапазон значений: -128 ... 127\n
Замечания: Используются для хранения 8-разрядных ASCII-символов либо любых других 8-разрядных значений.\n\n

Тип: unsigned char\n
Размер (байт): 1\n
Диапазон значений: 0 ... 255\n
Замечания: Используются для хранения 8-разрядных ASCII-символов либо любых других 8-разрядных значений.\n\n

Тип: signed short int\n
Размер (байт): 2\n
Диапазон значений: -32768 ... 32767\n
Замечания: Спецификатор signed указывает рассматривать старший бит числа как знаковый (0 - положительное число, 1 - отрицательное). По умолчанию целочисленные типы считаются знаковыми (спецификатор signed можно опускать). При использовании спецификатора unsigned старший разряд рассматривается как часть кода числа, поэтому представляются только положительные числа.\n\n

Тип: unsigned short int\n
Размер (байт): 2\n
Диапазон значений: 0 ... 65535\n
Замечания: Спецификатор signed указывает рассматривать старший бит числа как знаковый (0 - положительное число, 1 - отрицательное). По умолчанию целочисленные типы считаются знаковыми (спецификатор signed можно опускать). При использовании спецификатора unsigned старший разряд рассматривается как часть кода числа, поэтому представляются только положительные числа.\n\n

Тип: signed long int\n
Размер (байт): 4\n
Диапазон значений: -2 147 483 648 ... 2 147 483 647\n
Замечания: Спецификатор signed указывает рассматривать старший бит числа как знаковый (0 - положительное число, 1 - отрицательное). По умолчанию целочисленные типы считаются знаковыми (спецификатор signed можно опускать). При использовании спецификатора unsigned старший разряд рассматривается как часть кода числа, поэтому представляются только положительные числа.\n\n

Тип: unsigned long int\n
Размер (байт): 4\n
Диапазон значений: 0 ... 4 294 967 295\n
Замечания: Спецификатор signed указывает рассматривать старший бит числа как знаковый (0 - положительное число, 1 - отрицательное). По умолчанию целочисленные типы считаются знаковыми (спецификатор signed можно опускать). При использовании спецификатора unsigned старший разряд рассматривается как часть кода числа, поэтому представляются только положительные числа.\n\n

Тип: float\n
Размер (байт): 4\n
Диапазон значений: 3.4e-38 ... 3.4e+38\n
Замечания: Типы данных с плавающей точкой. Эти типы хранятся в памяти компьютера иначе, чем целочисленные: представление вещественного числа состоит из двух частей — мантиссы и порядка. Константы с плавающей точкой имеют по умолчанию тип double.\n\n

Тип: double\n
Размер (байт): 8\n
Диапазон значений: 1.7e-308 ... 1.7e+308\n
Замечания: Типы данных с плавающей точкой. Эти типы хранятся в памяти компьютера иначе, чем целочисленные: представление вещественного числа состоит из двух частей — мантиссы и порядка. Константы с плавающей точкой имеют по умолчанию тип double.\n\n

Тип: long double\n
Размер (байт):8\n
Диапазон значений: 3.4e-4932 ... 3.4e+4932\n
Замечания: Типы данных с плавающей точкой. Эти типы хранятся в памяти компьютера иначе, чем целочисленные: представление вещественного числа состоит из двух частей — мантиссы и порядка. Константы с плавающей точкой имеют по умолчанию тип double.\n\n

Константам, встречающимся в программе, компилятор приписывает тот или иной тип в соответствии с их видом. Можно явно указать требуемый тип с помощью соответствующих суффиксов:\n
•	Для целых типов:\n
L, l (long) и u, U (unsigned). Например, 50L будет иметь тип long. Суффиксы L и U можно использовать одновременно, например: 105LU.\n
•	Для вещественных типов:\n
F, f (float) и L, l (long). Например, константа 3e+5L будет иметь тип long double, а константа 1.82f — тип float.\n\n

Тип void\n
К основным типам языка С++ относится также тип void. Множество значений этого типа пусто. Он применяется для определения функций, которые не возвращают значения, для указания пустого списка аргументов функции, как базовый тип для указателей и в операции приведения типов.
</item>
        <item>Колумбия</item>
        <item>Чили</item>
        <item>Уругвай</item>
        <item>Уругвай</item>
    </string-array>
</resources>